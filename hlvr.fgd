//Placeholder FGD created by Gvarados, thenayr, Marnamai, kolessios, Block57, XBLAH, Limited and Dyna

//DOWNLOAD UPDATES AT:
//https://github.com/gvarados1/Half-Life-Alyx-FGD


@include "base.fgd"
@include "lights.fgd"
@include "ai_basenpc.fgd"
@include "markup_volumes.fgd"
@include "postprocessing.fgd"

@BaseClass base(BaseNPC, Studiomodel, Parentname, DamageFilter) = BaseModelNPC
[
]

@BaseClass base(TalkNPC, BaseModelNPC) = BaseHumanNPC
[
]

@BaseClass base(BaseHumanNPC) = VRCitizenNPC
[
	background_character(boolean) : "Background character" : 0

	Relationship(string) : "Relationship" : ""
	
	physdamagescale(float) : "Physdamagescale" : "0.1"


	// Inputs
	input KilledNPC(void)
	input BecomeServerRagdoll(void)
]


@BaseClass base(BaseModelNPC) = BaseHeadcrab
[
	// Inputs
	input Burrow(void): ""
	input BurrowImmediate(void): ""
	input Unburrow(void): ""
	input StartHangingFromCeiling(void): ""
	input DropFromCeiling(void): ""
]

@BaseClass base(GameEntity) = BaseCurveOverTime
[
	curve(curve) : "Curve" : "" : "The curve to use."

	// Inputs
	input Start(void): ""
]

// ----------------------------------------- MONSTERS -----------------------------------------
@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab_classic/headcrab_classic.vmdl") = npc_headcrab : "Placeholder"
[
]

@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab_black/headcrab_black.vmdl") = npc_headcrab_black : "Placeholder"
[
]

@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab/headcrab.vmdl") = npc_headcrab_poison : "Placeholder"
[
]

@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab/headcrab.vmdl") = npc_headcrab_fast : "Placeholder. DOES NOT MAKE SOUNDS"
[
]

@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab_armored/headcrab_armored.vmdl") = npc_headcrab_armored : "Placeholder"
[
]

@NPCClass base(BaseHeadcrab) model("models/creatures/headcrab_reviver/headcrab_reviver.vmdl") = npc_headcrab_runner : "Placeholder"
[
	// Inputs
	input ForceRevive(void): ""
	input AbandonHost(void): ""

	// Outputs
	output OnReviverInhabit(void) : ""
	output OnReviverEscape(void) : ""
]

@NPCClass base(BaseModelNPC) model("models/creatures/zombie_classic/zombie_classic.vmdl") = npc_zombie : "Basic Half-Life zombie NPC."
[

	armored_headcrab(boolean) [group="Zombie properties"] : "Armored Headcrab" : 0 : "Should wear an Armored Headcrab instead of regular Headcrab."
	
	revivable(boolean) [group="Zombie properties"] : "Revivable" : 0 : "Can be revived by npc_headcrab_runner after dying."
	waitforrevival(boolean) [group="Zombie properties"] : "Wait for revival" : 0 : "Will spawn dead and wait to be revived by npc_headcrab_runner."
	reviver_group(string) [group="Zombie properties"] : "Reviver group"

	bloater_position(choices) [group="Zombie properties"] : "Xen Bloater position" : -1 : "Specifies a body location to attach a xen bloater that blows up when shot." =
	[
		-1: "None"
		0: "Chest"
		1: "Head"
		2: "Left arm"
		3: "Right arm"
		4: "Left leg"
		5: "Right leg"
	]

	turret_position(choices) [group="Zombie properties"] : "Turret position" : 0 : "Specifies a body location to attach a xen_foliage_grenade_spawner on the zombie." =
	[
		0: "None"
		1: "Left arm"
		2: "Right arm"
	]

	held_object(target_destination) [group="Zombie properties"] : "Held object" : "" : "prop_physics entity that should be held by the zombie. Zombie will throw the object at player."

	sprint_proclivity(float) [group="Zombie properties"] : "Sprint proclivity" : 1 : "Zombie's tendency to move in faster burts. Make them move faster."
	flinch_chance(float) [group="Zombie properties"] : "Flinch chance" : 1 : "Zombie flinch change is multiplied by this value. (untested)"

	// Inputs
	input StartSprint(void) : "Unknown"
	input ToggleHead(integer) : "Changes the visibility of the headcrab on the head. Works even when dead. Parameter 0 for off, 1 for on."

	// Outputs
	output OnDeathCanRevive(void) : "Triggered if this zombie dies AND they are set to be revivable"
]

@NPCClass base(BaseModelNPC) model("models/creatures/zombie_blind/zombie_blind.vmdl") = npc_zombie_blind : "Jeff"
[
	// Inputs
	input SetDeafState(void): ""
	input ClearSounds(void): ""
	input SetFling(void): ""
	input SetInLockIn(void): ""
	input SetInElevator(void): ""
	input SetOutsideElevator(void): ""
	input SetNearConsole(void): ""
	input SetHeadedToConsole(void): ""
	input SetHeadedToElevator(void): ""
	input SetHeadedToFreezerDoor(void): ""
	input SetSuppressMovement(void): ""
	input HitMark(void): ""
	input SetReviverIntro(void): ""
	input MoveReviverTo(void): ""
	input SetStormYaw(void): ""
	input StartSprint(void): ""
	input ToggleHead(void): ""

	// Outputs
	output OnHeardNoise(void) : ""
	output OnFling(void) : ""
	output OnHitMark(void) : ""
	output OnBreakDoor(void) : ""
	output OnElevatorBeat(void) : ""
	output OnDeathCanRevive(void) : ""
]

@NPCClass base(BaseModelNPC) model("models/creatures/manhack/manhack.vmdl") = npc_manhack : "Placeholder"
[
	// Inputs
	input InteractivePowerDown(void): ""
	input DisableSwarm(void): ""
	input Unpack(void): ""

	// Outputs
	output OnAlyxStartedInteraction(void) : ""
	output OnAlyxFinishedInteraction(void) : ""
]

@NPCClass base(BaseModelNPC) model("models/creatures/barnacle/barnacle.vmdl") = npc_barnacle : "Placeholder"
[
]

@NPCClass base(BaseModelNPC, BasePhysicsSimulated) model("models/combine_turrets/floor_turret.vmdl") = npc_turret_floor : "Placeholder"
[
]

@NPCClass base(BaseModelNPC) model("models/creatures/antlion/antlion.vmdl") = npc_antlion : "Placeholder"
[
	model(choices) : "Model" : "models/creatures/antlion/antlion.vmdl" : "Antlion" = 
	[
		"models/creatures/antlion/antlion.vmdl" : "Antlion"
		"models/creatures/antlion/antlion_worker.vmdl" : "Antlion Worker"
	]
]

@NPCClass base(BaseHumanNPC) model("models/characters/eli/eli.vmdl") = npc_eli : "Placeholder"
[
]

@NPCClass base(BaseHumanNPC, RappelNPC) studio() = npc_combine_s : "PLACEHOLDER Combine Soldier"
[
	model(choices) : "Model" : "models/characters/combine_grunt/combine_grunt.vmdl" : "" = 
	[
		"models/characters/combine_grunt/combine_grunt.vmdl" : "Grunt"
		"models/characters/combine_suppressor/combine_suppressor.vmdl" : "Suppressor"
		"models/characters/combine_soldier_heavy/combine_soldier_heavy.vmdl" : "Heavy"
		"models/characters/combine_soldier_captain/combine_captain.vmdl" : "Captain"
	]

	additionalequipment(choices) : "Weapons" : "" =
	[
		"" : "Default"
		"0" : "Nothing"
		"weapon_ar2" : "AR2" // Captain
		"weapon_heavymg" : "Heavy" // Suppressor
		"weapon_shotgun" : "Shotgun" // Heavy
		"weapon_smg1" : "SMG1" // Grunt
	]

	NumGrenades(choices) : "Number of Grenades" : "0" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	SmokeGrenades(choices) : "Number of Smoke Grenades" : "0" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	manhacks(Choices) : "Number of Manhacks" : 0 =
	[
		0 : "None"
		1 : "1"
		2 : "2"
	]

	initial_manhack_delay(float) : "" : "0"

	min_advance_range_override(float) : "Override Advance Range" : "0"

	sentry_position_name(string) : "" : ""

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Pressure the enemy (Keep advancing)"
		"2" : "Pressure until within 30ft, then normal"
	]
	
	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only." =
	[
		"0" : "No"
		"2" : "Yes"
	]

	// Inputs
	input StartPatrolling(void) : ""
	input StopPatrolling(void) : ""
	input LookOff(void) : ""
	input LookOn(void) : ""
	input Assault(void) : ""
	input HitByBugbait(void) : ""
	input ThrowGrenadeAtTarget(string) : ""
	input ThrowSmokeGrenadeAtTarget(string) : ""
	input ThrowSmokeGrenadeBetweenTarget(string) : ""
	input SetMinAdvanceRange(integer) : ""
	input SetMaxWeaponRange(integer) : ""
	input SetForceWalkRun(void) : ""
	input SetForceAim(void) : ""
	input SetForceShield(void) : ""
	input SetPatrolBlind(void) : ""
	input CarriedGrenadeIgnited(void) : ""
	input SetTacticalVariant(void) : ""
	input SetSentryPositionName(string) : ""
	input SetAllowedToDeployManhacks(void) : ""
	input SetAllowedToThrowGrenades(void) : ""
	
	input SetExpressionOverride(string): ""
	input IgnorePlayer(void) : ""
	input DisableRandomLookAts(void) : ""
	input EnableRandomLookAts(void) : ""
	input EnableBlinking(void) : ""
	input DisableBlinking(void) : ""
	input EnableLookAt(void) : ""
	input DisableLookAt(void) : ""
	input EnableFacing(void) : ""
	input DisableFacing(void) : ""
	input LockRightHand(void) : ""
	input UnlockRightHand(void) : ""
	input LockLeftHand(void) : ""
	input UnlockLeftHand(void) : ""
	input EnableChoreoLookAts(void): ""
	input DisableChoreoLookAts(void): ""
	input LookAtIgnoreHands(void): ""
	input LookAtUseHands(void): ""
	input IgnoreDangerSounds(void): ""
	input InsideTransition(void): ""
	input OutsideTransition(void): ""
	input ActivateSpeedModifier(void): ""
	input DisableSpeedModifier(void): ""
	input SetSpeedModRadius(float): ""
	input SetSpeedModSpeed(float): ""
	input AttachedItemDetached(void): ""
	input ForceLookAtTarget(string): ""
	input ClearForcedLookAtTarget(void): ""
	input EnableChoreoPhysProxy(void): ""
	input DisableChoreoPhysProxy(void): ""
	input KilledNPC(void): ""
	input BecomeServerRagdoll(void): ""
	input ActivateModelConfig(void): ""
	input ActivateOrResetModelConfig(void): ""
	input DeactivateModelConfig(void): ""
	input SetKinematic(void): ""
	input SetScale(float): ""
	input TeamNum(integer): ""
	input SetTeam(integer): ""

	// Outputs
	output OnPatrolBlindBroken(void) : ""
	output OnDeployedManhack(void) : ""
	output OnDeployedManhack(void) : ""
]

@PointClass base(Targetname, Studiomodel) model() = xen_foliage_grenade_spawner : "Placeholder"
[
	model(studio) : "World Model" : "models/props/xen_infestation/xen_grenade_plant.vmdl"
]

@PointClass base(Targetname) model("models/props/xen_infestation/boomerplant_01.vmdl") = xen_foliage_bloater : "Placeholder"
[
]

@PointClass base(BaseModelNPC) model("models/creatures/strider/combine_strider.vmdl") = npc_strider : "The strider NPC"
[
	disablephysics(boolean) : "Disable physics" : 0
	strider_feet_not_dangerous(boolean) : "Feet not dangerous" : 0

	// Inputs
	input SetMinigunTime(float)
	input SetMinigunTarget(string)
	input SetCannonTarget(string)
	input FlickRagdoll(string)
	input Crouch(void)
	input CrouchInstantly(void)
	input Stand(void)
	input SetHeight(float)
	input SetTargetPath(string)
	input ClearTargetPath(string)
	input DisableCrouchWalk(void)
	input EnableCrouchWalk(void)
	input EnableAggressiveBehavior(void)
	input DisableAggressiveBehavior(void)
	input DisableMinigun(void)
	input EnableMinigun(void)
	input EnableMinigunSuppression(void)
	input ForceEnableMinigun(void)
	input ForceMinigunSuppression(void)
	input ForceDisableMinigun(void)
	input CancelForceMinigun(void)
	input StopShootingMinigunForSeconds(float)
	input DisableCrouch(void)
	input DisableMoveToLOS(void)
	input DisableCollisionWith(string)
	input EnableCollisionWith(string)
	input Explode(void)
	input ScaleGroundSpeed(float)
	input ForcePlayerAsEnemy(void)
	
	// Outputs
	output OnQuarterHealth(void)
	output OnHalfHealth(void)
	output OnThreeQuarterHealth(void)
	output OnMinigunDisabled(void)
	output OnMinigunEnabledLOS(void)
	output OnMinigunEnabledSuppression(void)
	output OnAttackedByPlayerNoDamage(void)
]

@NPCClass base(VRCitizenNPC) model("models/characters/citizens/citizens_female.vmdl") = npc_vr_citizen_female
[
]

@NPCClass base(VRCitizenNPC) model("models/characters/citizens/citizens_male.vmdl") = npc_vr_citizen_male
[
]


// ----------------------------------------- TILE ENTITIES -----------------------------------------
@SolidClass base(RenderFields, Targetname) = func_dry_erase_board : "A dry erase board."
[
	StampName(target_destination) : "Stamp Name" : "" : "Selects an info_particle_system to use as a default state for the board."
	DisableFrontOfBoardCheck(boolean) : "Disable Front of Board Check" : 0
]

@SolidClass base(func_brush) = func_combine_barrier : "Combine Barrier"
[
	barrier_state(integer) : "Barrier State" : 128
	effect_name(particlesystem) : "Effect Name" : "particles/combine_tech/combine_barrier.vpcf"
	effect_interpenetrate_name(particlesystem) : "Interpenetrate Effect Name" : "particles/combine_tech/combine_filter_field_interpenetrate.vpcf"
	
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	// Inputs
	input SetBarrierState(integer) : "Sets the state of the barrier."
]

// ----------------------------------------- ITEMS -----------------------------------------
@PointClass base(Targetname) editormodel("models/props_combine/health_charger/combine_health_charger_vr.vmdl") = item_healthcharger : "Grub-powered Health Chargers."
[
	start_with_vial(boolean) : "Start With Vial" : 0 : "Create the health charger with a grub in place."
	vial_level(float) : "Vial Level" : 1 : "Set the level of health the grub is at on creation, if start_with_vial is set to 1."
]

@PointClass base(Targetname, Studiomodel, EnableDisable) editormodel("models/props_combine/combine_printer/combine_crafting_station.vmdl") = prop_hlvr_crafting_station : ""
[
	hacking_plug(target_destination) : "Hacking Plug Entity Name"
	is_powered(boolean) : "Is Powered" : 1
	
	// Inputs
	input HackingPlugSuccess(void) : "Activates console, allowing weapons to be upgraded."
	input OpenStation(void) : "Activates console, allowing weapons to be upgraded."
	input ReturnWeapon(void) : "Returns the weapon to the player's hand."
	
	// Outputs
	output OnPlayerNear(void) : "When the player is near the console."
]

@PointClass base(Targetname, Parentname, EnableDisable) editormodel("models/props_combine/combine_doors/combine_hacking_interact_point.vmdl") = info_hlvr_holo_hacking_plug : "Hacking plug, uses Alyx's multitool to complete a puzzle."
[
	HackDifficultyName(choices) : "Difficulty Name" : "Medium" : "scripts/holo_hacking_difficulty.txt" = 
	[
		"First" : "First"
		"Easy" : "Easy"
		"Medium" : "Medium"
		"Hard" : "Hard"
		"VeryHard" : "VeryHard"
		"a2_quarantine_entrance_locker_1" : "a2_quarantine_entrance_locker_1"
		"a2_pistol_crafting_station_1" : "a2_pistol_crafting_station_1"
		"a2_headcrabs_tunnel_crafting_station_1" : "a2_headcrabs_tunnel_crafting_station_1"
		"a2_drainage_combine_door_1" : "a2_drainage_combine_door_1"
		"a2_train_yard_crafting_station_1" : "a2_train_yard_crafting_station_1"
		"a2_train_yard_combine_console_1" : "a2_train_yard_combine_console_1"
		"a2_train_yard_combine_door_1" : "a2_train_yard_combine_door_1"
		"a3_station_street_locker_1" : "a3_station_street_locker_1"
		"a3_station_street_locker_2" : "a3_station_street_locker_2"
		"a3_station_street_crafting_station_1" : "a3_station_street_crafting_station_1"
		"a3_station_street_locker_4" : "a3_station_street_locker_4"
		"a3_hotel_lobby_basement_locker_1" : "a3_hotel_lobby_basement_locker_1"
		"a3_hotel_underground_pit_door_1" : "a3_hotel_underground_pit_door_1"
		"a3_hotel_underground_pit_locker_1" : "a3_hotel_underground_pit_locker_1"
		"a3_hotel_underground_pit_door_2" : "a3_hotel_underground_pit_door_2"
		"a3_hotel_underground_pit_crafting_station_1" : "a3_hotel_underground_pit_crafting_station_1"
		"a3_hotel_underground_pit_locker_2" : "a3_hotel_underground_pit_locker_2"
		"a3_hotel_interior_rooftop_locker_1" : "a3_hotel_interior_rooftop_locker_1"
		"a3_hotel_interior_rooftop_locker_2" : "a3_hotel_interior_rooftop_locker_2"
		"a3_hotel_interior_rooftop_locker_3" : "a3_hotel_interior_rooftop_locker_3"
		"a3_hotel_interior_rooftop_locker_4" : "a3_hotel_interior_rooftop_locker_4"
		"a3_hotel_street_locker_1" : "a3_hotel_street_locker_1"
		"a3_hotel_street_crafting_station_1" : "a3_hotel_street_crafting_station_1"
		"a3_c17_processing_plant_crafting_station_1" : "a3_c17_processing_plant_crafting_station_1"
		"a3_c17_processing_plant_locker_1" : "a3_c17_processing_plant_locker_1"
		"a3_c17_processing_plant_locker_2" : "a3_c17_processing_plant_locker_2"
		"a3_c17_processing_plant_crafting_station_2" : "a3_c17_processing_plant_crafting_station_2"
		"a3_c17_processing_plant_locker_3" : "a3_c17_processing_plant_locker_3"
		"a4_c17_zoo_crafting_station_1" : "a4_c17_zoo_crafting_station_1"
		"a4_c17_tanker_yard_crafting_station_1" : "a4_c17_tanker_yard_crafting_station_1"
		"a4_c17_tanker_yard_locker_1" : "a4_c17_tanker_yard_locker_1"
		"a4_c17_water_tower_locker_1" : "a4_c17_water_tower_locker_1"
		"a4_c17_water_tower_crafting_station_1" : "a4_c17_water_tower_crafting_station_1"
		"a4_c17_parking_garage_locker_1" : "a4_c17_parking_garage_locker_1"
		"holo_hacking_test_combine_console_hack_preview" : "holo_hacking_test_combine_console_hack_preview"
		"holo_hacking_test_crafting_station_hack_preview" : "holo_hacking_test_crafting_station_hack_preview"
		"holo_hacking_test_combine_door_hack_preview" : "holo_hacking_test_combine_door_hack_preview"
		"holo_hacking_test_switch_box_hack_preview" : "holo_hacking_test_switch_box_hack_preview"
		"holo_hacking_test_locker_hack_preview" : "holo_hacking_test_locker_hack_preview"
		"holo_hacking_test_back_wall_locker_1" : "holo_hacking_test_back_wall_locker_1"
		"holo_hacking_test_back_wall_locker_2" : "holo_hacking_test_back_wall_locker_2"
		"holo_hacking_test_back_wall_locker_3" : "holo_hacking_test_back_wall_locker_3"
		"a3_hotel_underground_pit_door_1_trailer" : "a3_hotel_underground_pit_door_1_trailer"
	]
	PuzzleType(choices) : "Puzzle Type" : 0 : "" =
	[
		0 : "Sphere Trace"
		1 : "Point Search"
		2 : "BROKEN"
		3 : "Point Drag (UNUSED)"
		4 : "Point Match"
		5 : "No Puzzle"
	]
	PuzzleSpawnTarget(target_destination) : "Puzzle Spawn Target"
	PuzzleSpawnTargetAttachment(string) : "Puzzle Spawn Target Attachment"

	// Inputs
	input Enable(void) : ""
	input Disable(void): ""
	input BeginHack(void): "Begins the hack as if the multitool started it."
	input EndHack(void): "Ends the hack."

	// Outputs
	output OnHackStarted(void) : "When the hack starts."
	output OnHackStopped(void) : "When the hack is stopped."
	output OnHackSuccess(void) : "When the hack is completed successfully."
	output OnHackFailed(void) : "When the hack is failed."
	output OnHackSuccessAnimationComplete(void) : "When the hack success animation is over."
	output OnPuzzleCompleted(void) : "When the puzzle is done."
	output OnPuzzleSuccess(void) : "When the puzzle is completed successfully."
	output OnPuzzleFailed(void) : "When the puzzle is failed."
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmat") leansphere( radius, 255, 64, 64 ) = info_hlvr_holo_hacking_spawn_target : "Spawn targets for the hacking plug puzzles."
[
	radius(float) : "Radius" : 32 : "The radius the puzzle spawns in around the entity"
	hidden(boolean) : "Hidden" : 0
	//given a model in all maps, maybe to designate what type the puzzle is?
	model(studio) : "World Model" : "models/hacking/holo_hacking_sphere_prop_editor_point_search.vmdl"
]

@PointClass model("models/props/hotel/piano_001.vmdl") = hlvr_piano : "Piano found at the Northern Star."
[
	output OnPlayerStartPlayingPiano(void) : "When the player starts to play the piano."
	output OnPlayerStopPlayingPiano(void) : "When the player stops playing the piano."
	output OnPlayerPlayingPiano(void) : "While the player is playing the piano."
] 

@PointClass base(Targetname, Parentname, prop_detail) model() model("models/editor/arrow.vmdl") = prop_laser_puzzle_emitter : "Emits a laser."
[
]

@PointClass base(prop_physics) model() = prop_laser_puzzle_splitter : "Splits a laser."
[
]

@PointClass base(prop_physics) model() = prop_laser_puzzle_mirror : "Reflects a laser."
[
]

@PointClass base(Targetname, Parentname, prop_detail) model() = prop_laser_puzzle_receiver : "Recives a laser."
[
	// Output
	output OnStartHitByLaser(void) : "Triggered when hit by a laser from prop_laser_puzzle_emitter."
	output OnStopHitByLaser(void) : "Triggered when stops being hit by a laser."
]


// ----------------------------------------- WEAPONS -----------------------------------------

@BaseClass base(Targetname, Parentname) = Item
[
	phys_start_asleep(boolean) : "Start asleep" : 0 : "Physics start asleep."

	// Output
	output OnPlayerPickup(string)
	output OnPlayerTouch(string)
	output OnGlovePulled(string)
	output OnCacheInteraction(string)
]

@BaseClass base(Item) = ItemHLVRWeapon
[
	set_spawn_ammo(integer) : "Spawn Ammo" : 0 : "The ammount of ammo the weapon has on spawn."
]

@PointClass base(ItemHLVRWeapon) model("models/weapons/vr_alyxgun/vr_alyxgun_assembled.vmdl") = item_hlvr_weapon_energygun : "The pistol." []
@PointClass base(ItemHLVRWeapon) model("models/weapons/vr_shotgun/vr_flip_shotgun_body.vmdl") = item_hlvr_weapon_shotgun : "The shotgun." []
@PointClass base(ItemHLVRWeapon) model("models/weapons/vr_ipistol/vr_ipistol.vmdl") = item_hlvr_weapon_rapidfire : "The SMG (rapidfire)." []

@PointClass base(Item) model("models/weapons/vr_alyxtool/alyx_tool.vmdl") = item_hlvr_multitool :
	"Alyx's hacker tool. Unfortunately can't be held or equiped."
[
]

@BaseClass base(BasePropPhysics) = ItemHLVRWeapon_Clip
[
	ammobalancing_removable(boolean) : "Removable For Ammo Balancing" : 0
	
	// Inputs
	input LateInsertIntoBackpack(target_destination) : "Puts the item into the backpack?"
]

@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_alyxgun/vr_alyxgun_clip.vmdl") = item_hlvr_clip_energygun : "Placeholder" []
@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_alyxgun/pistol_clip_holder.vmdl") = item_hlvr_clip_energygun_multiple : "Placeholder" []

@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_shotgun/shell_hand.vmdl") = item_hlvr_clip_shotgun_single : "SINGLE SHELL" []
@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_shotgun/shell_hand.vmdl") = item_hlvr_clip_shotgun_shells_pair : "TWO SHELLS" []
@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_ammo/shotgun_shell_ammo_box.vmdl") = item_hlvr_clip_shotgun_multiple : "FOUR SHELLS" []

@PointClass base(ItemHLVRWeapon_Clip) editormodel("models/weapons/vr_ipistol/capsule_power_cell.vmdl") = item_hlvr_clip_rapidfire : "Placeholder" []

@BaseClass base(BasePropPhysics) = VRGrenadeFrag
[
	ammobalancing_removable(boolean) : "Removable For Ammo Balancing" : 0

	// Inputs
	input ArmGrenade(void) : "Arms the grenade."
	
	// Outputs
	output OnExplode(void) : "When the grenade explodes."
]

@PointClass base(VRGrenadeFrag) editormodel("models/weapons/vr_grenade/grenade_unarmed.vmdl") = item_hlvr_grenade_frag : "Placeholder" []
@PointClass base(VRGrenadeFrag) editormodel("models/weapons/vr_xen_grenade/vr_xen_grenade.vmdl") = item_hlvr_grenade_xen : "Placeholder" []
@PointClass base(VRGrenadeFrag) editormodel("models/props/combine/combine_truck_gun_projectile.vmdl") = item_hlvr_grenade_bomb : "The grenade fired from the cannon during the last chapter of the game." []

@PointClass base(BasePropPhysics) editormodel("models/weapons/vr_tripmine/tripmine.vmdl") = item_hlvr_weapon_tripmine : "A tripmine. It can be activated and hacked when placed on a wall otherwise it could be used by the player."
[
	PreventTripping(boolean) : "Prevent Tripping" : 0 : "Prevent the tripmine from exploding when touching the laser."
	StartActivated(boolean) : "Start Activated" : 1 : "Turn on the red lights and add the hack port. - Wall: Activates the laser and remains attached to the wall. - Loose: Field Ignored."
	
	StartAttached(boolean) : "Start Attached (Obsolete)" : 0 : "Attach to the wall but deactivates the laser. Maybe an obsolete field? (Please use Start Activated instead) - Loose: Field Ignored."

	// Ouputs
	output OnExplode(void) : ""

	// Inputs
	input AllowTripping(void) : ""
	input ActivateMine(void) : ""
	input DeactivateMine(void) : ""
]

@PointClass base(BasePropPhysics, Targetname, DamageFilter, BaseFadeProp) model("models/props/supplycrate/supplycrate_01.vmdl") = item_item_crate : "A crate that contains a specified item."
[
	CrateAppearance(choices) : "Crate Appearance" : 2 =
	[
		0 : "HL2 Default Crate"
		1 : "HL2 Beacon Crate"
		2 : "Half-Life: Alyx Default Crate"
	]

	ItemClass(pointentityclass) : "Item Type" : "item_healthvial" : "Class name of the entity to spawn when the crate is broken"
	ItemCount(integer) : "Item Count" : 1 : "Number of items to emit upon breakage"
	SpecificResupply(target_destination) : "Specific resupply" : "" : "If item type is item_dynamic_resupply, specify a specific one to use instead of the master"

	ammobalancing_removable(boolean) : "Removable For Ammo Balancing" : 0

	// Inputs
	input Kill(void) : "Remove the item crate"
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	
	// Outputs
	output OnBreak(void) : "Fires when broken."
	output OnHealthChanged(float) : "Fires when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this crate. Fires on: Picked up by +USE, Picked up by Physcannon, Punted by Physcannon, Broken."
]
// ----------------------------------------- PICKUPS -----------------------------------------
@PointClass base(BasePropPhysics) editormodel("models/weapons/vr_alyxhealth/vr_health_pen.vmdl") = item_healthvial : "Placeholder"
[
	ammobalancing_removable(boolean) : "Removable For Ammo Balancing" : 0
]

@PointClass base(Targetname) editormodel("models/props_combine/health_charger/health_vial.vmdl") = item_hlvr_health_station_vial : "Placeholder"
[
	vial_level(float) : "Vial Level" : 1 : "Set the level of health the grub is at on crush."
]

@BaseClass base(BasePropPhysics) = CraftingCurrency
[
	remove_over_amount(integer) : "Remove Over Amount" : -1 : "Removes this resin when the player has more than N resin."
	
	// Inputs
	input LateInsertIntoBackpack(target_destination) : "Puts the item into the backpack?"
	
	// Outputs
	output OnPutInInventory(void) : "After the resin is put into the inventory."
]

@PointClass base(CraftingCurrency) editormodel("models/items/crafting_metal/resin_puck01.vmdl") = item_hlvr_crafting_currency_small : "Small resin." []
@PointClass base(CraftingCurrency) editormodel("models/items/crafting_metal/resin_puck_stack.vmdl") = item_hlvr_crafting_currency_large : "Large resin." []

@BaseClass base(BasePropPhysics) = PropBattery
[
	battery_level(float) : "Battery Level" : 1 : "No clue, doesn't seem like anything can drain it?"
	show_battery_level(boolean) : "Show Battery Level" : 0 : "Shows the battery level as a point text. Wouldn't recommend using."
	
	// Inputs
	input SetAttachedToSocket(boolean) : "Sets if the battery is attached to a socket. Argument is a boolean."
]

@PointClass base(PropBattery) editormodel("models/props_combine/combine_battery/combine_battery_large.vmdl") = item_hlvr_prop_battery : "Placeholder" []
@PointClass base(PropBattery) editormodel("models/creatures/headcrab_reviver/reviver_heart.vmdl") = prop_reviver_heart : "Placeholder" []

@PointClass base(Targetname) editormodel("models/props/headcrab_guts/headcrab_gland.vmdl") = item_hlvr_headcrab_gland : "Placeholder"
[
	// Outputs
	output OnSqueezed(void) : "When the gland is squeezed."
]

// ----------------------------------------- PROPS -----------------------------------------
@PointClass base(prop_physics) model() = prop_dry_erase_marker : "A prop that draws lines on a func_dry_erase_board with a specific colour, size and flow type"
[
	model(studio) : "World Model" : "models/props/alyx_hideout/dry_erase_marker_nocap.vmdl"
	MarkerType(choices) : "Marker Type" : 0 : "Type of flow the pen draws" =
	[
		0 : "Round Tip"
		2 : "Drying out"
		3 : "Dirty - Rough edges"
		4 : "Dried Out - No Color"
		5: "Erase"
		6: "Chisel"
	]
	MarkerTipSize(float): "Marker Size": "2.0": "Size of the pen line drawn"	
	MarkerColor(color255): "Marker Line Color" : "255 0 0": "The color the pen draws when used on a func_dry_erase_board"
	model(studio) : "Model" : "models/props/alyx_hideout/dry_erase_marker_nocap.vmdl"
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "tintable" : "Some models have multiple versions of their textures, called skins.\nTo change the tip color it requires it to be set to Tintable"
	renderamt(integer) [ group="Render Properties" ] : "FX Amount (0 - 255)" : 255 : "The FX amount is used by the selected Render Mode."
	rendercolor(color255) : "Marker Tip Color" : "255 0 0" : "The color used to render the tip of the pen. This is purely a visual change to the model and should match MarkerColor.\nFor a block eraser, set this to white (255,255,255) "
]

@PointClass base(Targetname, Parentname, Global, Studiomodel, Glow, EnableDisable) model() vecline_local(Extent) = prop_handpose :
	"Overrides the default hand pose to this one whenever the player hands " +
	"gets within proximity. Also used by trigger_traversal_modifier to specify " +
	"where the player can grab onto, e.g. with ladders, and climb inside the trigger. " +
	"For debugging, use command 'vr_hand_pose_debug 1' in game."
[
	model(choices) : "Model" : "models/props/max/handposes/handpose_grabpole.vmdl" : "Hand Model" = 
	[
		"models/props/max/handposes/handpose_grabbox.vmdl" : "Grab Box"
		"models/props/max/handposes/handpose_grabpole.vmdl" : "Grab Pole"
		"models/props/max/handposes/handpose_pointing.vmdl" : "Pointing"
		"models/props/max/handposes/handpose_flatpalm.vmdl" : "Flat Palm"
		"models/props/handposes/handpose_knob.vmdl" : "Knob"
		"models/props/handposes/handpose_cough.vmdl" : "Cough"
	]

	DistanceMin(float): "Minimum Distance": 4: "Minimum grabbable distance"
	DistanceMax(float): "Maximum Distance": 6: "Maximum grabbable distance"
	DistanceBias(float): "Distance Bias": "0.3"
	DisengageDistance(float): "Disengage Distance": "16"
	UseProximityBone(boolean): "UseProximityBone": 0
	Extent(vector): "Extend size": "0 0 0": "Relative size of the grabbable rungs of the ladder"
	DeleteAfterSpawn(boolean): "DeleteAfterSpawn": 0

	AutoGrip(boolean): "Auto grip": 0
	IgnoreHand(string): "Ignore hand": "-1": "Index of hand to ignore grab inputs form: 0=LeftHand, 1=RightHand"

	// Inputs
	input SetAutoGrip(boolean): ""

	// Outputs
	output OnHandPosed(void) : ""
	output OnHandUnPosed(void) : ""
]

@PointClass base(BasePropDoorRotating, ConstraintSoundInfo) model() = prop_door_rotating_physics : "Placeholder door."
[
	LatchIsBreakable(boolean) : "Latch is Breakable" : 0 : ""
	HingeIsBreakable(boolean) : "Hinge is Breakable" : 0 : ""
	ForceFullyOpen(boolean) : "Force Fully Open" : 0 : ""
	GrabAttachmentName(string) : "Grab Attachment Name" : 0 : ""
	
	// Inputs
	input SetOpenDirection(integer) : ""
	input SetLatchBreakable(boolean) : ""
	input SetHingeBreakable(boolean) : ""
	input EnableLatch(void) : ""
	input DisableLatch(void) : ""
	input ExtendLatch(integer) : ""
	input RetractLatch(integer) : ""
	input DetachDoor(void) : ""
	input InteractStart(integer) : ""
	input GrabbedHandle(integer) : ""
	input InteractStop(integer) : ""
	input GravityGunPull(void) : ""
	
	// Outputs
	output OnAjarUse(void): ""
	output OnLatchBreak(void): ""
	output OnHingeBreak(void): ""
]

@PointClass base(Studiomodel, Targetname, Parentname, EnableDisable) model() = prop_animinteractable : "A dynamic prop that can move by user input."
[
    // Properties
    ObjectRequirement(string) [ group="Animinteractable" ] : "Object Requirement" : "" : ""

    InitialCompletionAmount(float) [ group="Animinteractable" ] : "Initial Completion Amount" : 0 : "The completion amount of the prop on spawn. A value between 0-1 with 0 being the beginning of the animation/interaction and 1 then end."
    TargetCompletionValueA(float) [ group="Animinteractable" ] : "Target Completion Value A" : -1 : "The value of completion to fire OnCompletionA and its related events. -1 to disable."
    TargetCompletionValueB(float) [ group="Animinteractable" ] : "Target Completion Value B" : -1 : "The value of completion to fire OnCompletionB and its related events. -1 to disable."
    TargetCompletionValueC(float) [ group="Animinteractable" ] : "Target Completion Value C" : -1 : "The value of completion to fire OnCompletionC and its related events. -1 to disable."
    TargetCompletionValueD(float) [ group="Animinteractable" ] : "Target Completion Value D" : -1 : "The value of completion to fire OnCompletionD and its related events. -1 to disable."
    TargetCompletionValueE(float) [ group="Animinteractable" ] : "Target Completion Value E" : -1 : "The value of completion to fire OnCompletionE and its related events. -1 to disable."
    TargetCompletionValueF(float) [ group="Animinteractable" ] : "Target Completion Value F" : -1 : "The value of completion to fire OnCompletionF and its related events. -1 to disable."
    TargetCompletionThreshold(float) [ group="Animinteractable" ] : "Target Completion Threshold" : 0 : "The value at which the prop will complete itself when this far away from the target."
    
    ReturnToCompletion(boolean) [ group="Animinteractable" ] : "Return To Completion" : 0 : "Whether or not the prop should return back to a default completion amount."
    ReturnToCompletionAmount(float) [ group="Animinteractable" ] : "Return To Completion Amount" : 0 : "The default completion amount the prop should return back to."
    ReturnToCompletionThreshold(float) [ group="Animinteractable" ] : "Return To Completion Threshold" : -1 : "Threshold away from the default completion amount before the prop starts returning. -1 to disable."
    ReturnToCompletionDelay(float) [ group="Animinteractable" ] : "Return To Completion Delay" : 0 : "Time before it starts returning."
    ReturnToCompletionStyle(integer) [ group="Animinteractable" ] : "Return To Completion Style" : 0 : ""
    
    StartLocked(boolean) [ group="Animinteractable" ] : "Start Locked" : 0 : "Make the prop start in a locked state."
    OnlyRunForward(boolean) [ group="Animinteractable" ] : "Only Run Forward" : 0 : "Can only move in the forwards direction."
    OnlyRunBackward(boolean) [ group="Animinteractable" ] : "Only Run Backward" : 0 : "Can only move in the backwards direction."
    LimitForward(float) [ group="Animinteractable" ] : "Limit Forward" : 1 : "Limits how far forward the prop can travel."
    LimitBackward(float) [ group="Animinteractable" ] : "Limit Backward" : 0 : "Limits how far backward the prop can travel."
    LimitLocked(float) [ group="Animinteractable" ] : "Limit Locked" : 0 : "Limits how far the completion can travel when locked."
    LimitStop(float) [ group="Animinteractable" ] : "Limit Stop" : -1 : "Limits far much the completion can travel when stopped. -1 to disable."
    
    AnimationDuration(float) [ group="Animinteractable" ] : "Animation Duration" : 0 : "How long the animation should last."
    
    InteractionDisabled(boolean) [ group="Animinteractable" ] : "Interaction Disabled" : 0 : "Prevents the player from interacting with this prop."
    InteractionBoneName(string) [ group="Animinteractable" ] : "Interaction Bone Name" : "" : "The name of the model's bone to interact with."
    InteractionAttachmentName(string) [ group="Animinteractable" ] : "Interaction Attachment Name" : "" : "The name fo the model's attachment to interact with."
    
    IgnoreHandPosition(boolean) [ group="Animinteractable" ] : "Ignore Hand Position" : 0 : "Ignore the hand position when interacting with this prop."
    IgnoreHandRotation(boolean) [ group="Animinteractable" ] : "Ignore Hand Rotation" : 0 : "Ignore the hand rotation when interacting with this prop."
    
    SoundVolume(float) [ group="Animinteractable" ] : "Sound Volume" : 1 : "The volume the sounds should be played at."
    StartSound(sound) [ group="Animinteractable" ] : "Start Sound" : "" : "Sound played player starts interacting with this prop."
    MoveSound(sound) [ group="Animinteractable" ] : "Move Sound" : "" : "Sound played while prop is moving or being moved."
    StopSound(sound) [ group="Animinteractable" ] : "Stop Sound" : "" : "Sound played player stops interacting with this prop."
    OpenCompleteSound(sound) [ group="Animinteractable" ] : "Open Complete Sound" : "" : ""
    CloseCompleteSound(sound) [ group="Animinteractable" ] : "Close Complete Sound" : "" : ""
    BounceSound(sound) [ group="Animinteractable" ] : "Bounce Sound" : "" : "Sound played when movement reaches a limit and bounces back."
    LockedSound(sound) [ group="Animinteractable" ] : "Locked Sound" : "" : "Sound played when locked and movement reaches the locked limit."
    ReturnForwardMoveSound(sound) [ group="Animinteractable" ] : "Return Forward Move Sound" : "" : "Sound played when returning in the forwards direction."
    ReturnBackwardMoveSound(sound) [ group="Animinteractable" ] : "Return Backward Move Sound" : "" : "Sound played when returning in the backwards direction."
    
    ReactToDynamicPhysics(boolean) [ group="Animinteractable" ] : "React To Dynamic Physics" : 0 : ""
    DoHapticsOnBothHands(boolean) [ group="Animinteractable" ] : "Do Haptics On Both Hands" : 0 : ""
    ReleaseOnPlayerDamage(boolean) [ group="Animinteractable" ] : "Release On Player Damage" : 0 : ""
    BehaveAsPropPhysics(boolean) [ group="Animinteractable" ] : "Behave As Prop Physics" : 0 : ""
    AllowGravityGunPull(boolean) [ group="Animinteractable" ] : "Allow Gravity Gun Pull" : 1 : ""
    PositiveResistance(float) [ group="Animinteractable" ] : "Positive Resistance" : 0 : ""
    RetainVelocity(boolean) [ group="Animinteractable" ] : "Retain Velocity" : 0 : ""

    CreateNavObstacle(boolean) [ group="Animinteractable" ] : "Create Nav Obstacle" : 0 : ""
    SetNavIgnore(boolean) [ group="Animinteractable" ] : "Set Nav Ignore" : 0 : ""
    
    UpdateChildModels(boolean) [ group="Animinteractable" ] : "Update Child Models" : 0 : ""
    NormalizeChildModelUpdates(boolean) [ group="Animinteractable" ] : "Normalize Child Model Updates" : 0 : ""
    ChildModelAnimgraphParameter(string) [ group="Animinteractable" ] : "Child Model Animgraph Parameter" : "" : ""
 
    // Outputs
    output OnInteractStart(void) : "When the player starts interacting with this prop."
    output OnInteractStop(void) : "When the player stops interacting with this prop."
    output OnGravityGunPull(void) : "When pulled by the gravity gun."

    output OnCompletionA(void) : "When the specified completion A target is reached."
    output OnCompletionB(void) : "When the specified completion B target is reached."
    output OnCompletionC(void) : "When the specified completion C target is reached."
    output OnCompletionD(void) : "When the specified completion D target is reached."
    output OnCompletionE(void) : "When the specified completion E target is reached."
    output OnCompletionF(void) : "When the specified completion F target is reached."
    output OnCompletionA_Forward(void) : "When the specified completion A target is reached in the forwards direction."
    output OnCompletionB_Forward(void) : "When the specified completion B target is reached in the forwards direction."
    output OnCompletionC_Forward(void) : "When the specified completion C target is reached in the forwards direction."
    output OnCompletionD_Forward(void) : "When the specified completion D target is reached in the forwards direction."
    output OnCompletionE_Forward(void) : "When the specified completion E target is reached in the forwards direction."
    output OnCompletionF_Forward(void) : "When the specified completion F target is reached in the forwards direction."
    output OnCompletionA_Backward(void) : "When the specified completion A target is reached in the backwards direction."
    output OnCompletionB_Backward(void) : "When the specified completion B target is reached in the backwards direction."
    output OnCompletionC_Backward(void) : "When the specified completion C target is reached in the backwards direction."
    output OnCompletionD_Backward(void) : "When the specified completion D target is reached in the backwards direction."
    output OnCompletionE_Backward(void) : "When the specified completion E target is reached in the backwards direction."
    output OnCompletionF_Backward(void) : "When the specified completion F target is reached in the backwards direction."

    output OnCompletionExitA(void) : ""
    output OnCompletionExitB(void) : ""
    output OnCompletionExitC(void) : ""
    output OnCompletionExitD(void) : ""
    output OnCompletionExitE(void) : ""
    output OnCompletionExitF(void) : ""
    output OnReturnToCompletion(void) : ""
    output Position(void) : ""
    output PositionInverted(void) : ""
    output PositionRaw(void) : ""
    output Velocity(void) : ""
    output PositionInitialLimitsRemap(void) : ""
 
    // Inputs
    input EnableOnlyRunForward(void) : "Makes it so the prop can only move in the forwards direction."
    input DisableOnlyRunForward(void) : "Stops the prop from only moving in the forwards direction."
    input SetCompletionValue(float) : "Sets the current completion value directly."
    input SetCompletionValueA(float) : "Sets a new target value for CompletionA"
    input SetCompletionValueB(float) : "Sets a new target value for CompletionB"
    input SetCompletionValueC(float) : "Sets a new target value for CompletionC"
    input SetCompletionValueD(float) : "Sets a new target value for CompletionD"
    input SetCompletionValueE(float) : "Sets a new target value for CompletionE"
    input SetCompletionValueF(float) : "Sets a new target value for CompletionF"
    input SetReturnToCompletionAmount(float) : ""
    input EnableReturnToCompletion(void) : ""
    input DisableReturnToCompletion(void) : ""
    input DisableInteraction(boolean) : ""
    input SetAnimationDuration(float) : ""
    input SetLimitForward(float) : ""
    input SetLimitBackward(float) : ""
    input SetLimitStop(float) : ""
    input Lock(void) : ""
    input Unlock(void) : ""
    input PlayAnimation(string) : ""
    input ForcePlayerRelease(void) : ""
    input SetReturnToCompletionStyle(integer) : ""
    input StopBehavingLikePropPhysics(void) : ""
    input ForceImmediateReturnToCompletion(float) : ""
    input TurnIntoPhysicsProp(void) : ""
    input OnGravityGunPull(void) : ""
    input EnableChildModelUpdates(void) : ""
    input DisableChildModelUpdates(void) : ""
    input SetPositiveResistance(float) : ""
]

@PointClass base(prop_dynamic) = combine_attached_armor_prop :
[
	SubtleEffects(boolean) : "Subtle Effects" : 1
]

// ----------------------------------------- LOGIC -----------------------------------------
@PointClass base(Targetname, EnableDisable) tags( Logic ) size(-8 -8 -8, 8 8 8) = info_hlvr_equip_player : "Placeholder. I assume this is for equiping the gravity gloves (see inputs)"
[
	// Properties
	equip_on_mapstart(boolean) : "Equip on Map Start": 0
	start_weapons_empty(boolean) : "Start Weapons Empty" : 0
	energygun(boolean) : "Pistol" : 0
	shotgun(boolean) : "Shotgun" : 0
	rapidfire(boolean) : "Rapid Fire" : 0
	flashlight(boolean) : "Flashlight" : 0
	flashlight_enabled(boolean) : "Flashlight Enabled" : 0
	crowbar(boolean) : "Crowbar" : 0
	grabbitygloves(boolean) : "Grabbity Gloves" : 0
	slingshot(boolean) : "Slingshot" : 0
	itemholder(boolean) : "Item Holder" : 0
	radio(boolean) : "Radio" : 0
	multitool(boolean) : "Multitool" : 0
	set_ammo(integer) : "Pistol Ammo" : 0
	set_ammo_rapidfire(integer) : "Rapid Fire Ammo" : 0
	set_ammo_shotgun(integer) : "Shotgun Ammo" : 0
	set_resin(integer) : "Resin" : 0
	pistol_upgrade_lasersight(boolean) : "Pistol Laser Sight Upgrade" : 0
	pistol_upgrade_reflexsight(boolean) : "Pistol Reflex Sight Upgrade" : 0
	pistol_upgrade_bullethopper(boolean) : "Pistol Bullet Hopper Upgrade" : 0
	pistol_upgrade_burstfire(boolean) : "Pistol Burst Fire Upgrade" : 0
	rapidfire_upgrade_explodingclusters(boolean) : "Rapid Fire Exploding Bullets Upgrade" : 0
	rapidfire_upgrade_reflexsight(boolean) : "Rapid Fire Reflex Sight Upgrade" : 0
	rapidfire_upgrade_lasersight(boolean) : "Rapid Fire Laser Sight Upgrade" : 0
	rapidfire_upgrade_extended_magazine(boolean) : "Rapid Fire Extended Magazine Upgrade" : 0
	shotgun_upgrade_autoloader(boolean) : "Shotgun Autoloader Upgrade" : 0
	shotgun_upgrade_grenade(boolean) : "Shotgun Grenade Launcher Upgrade" : 0
	shotgun_upgrade_lasersight(boolean) : "Shotgun Laser Sight Upgrade" : 0
	shotgun_upgrade_quickfire(boolean) : "Shotgun Quick Fire Upgrade" : 0
	shotgun_has_grenade(boolean) : "Shotgun has grenade equipped" : 0
	energygun_loaded_ammo(integer) : "Loaded Pistol Ammo" : 0
	rapidfire_loaded_ammo(integer) : "Loaded Rapid Fire Ammo" : 0
	shotgun_loaded_ammo(integer) : "Loaded Shotgun Amo" : 0
	inventory_enabled(boolean) : "Inventory Enabled" : 0
	backpack_enabled(boolean) : "Backpack Enabled" : 0
	allow_removal(boolean) : "Allow Removal" : 0
	// Inputs
	input equipnow(void) : "Probably gives gravity gloves"
	input enablebackpack(void) : "Probably lets you collect ammo and resen"
	input enableinventory(void) : "Probably enables wrist pockets"
	input use(void) : "Probably doesn't do anything"
]

@PointClass base(Targetname, DamageFilter) tags( Logic ) size(-8 -8 -8, 8 8 8) = logic_playerproxy :
	"An entity that is used to relay inputs/ouputs to the player and back to the world."
[
	// Inputs
	input SetFlashlightSlowDrain(void) : ""
	input SetFlashlightNormalDrain(void) : ""
	input LowerWeapon(void) : ""
	input SetLocatorTargetEntity(void) : ""
	input RequestPlayerHealth(void) : ""
	input SetPlayerHealth(integer) : ""
	input RequestAmmoState(void) : ""
	input EnableCappedPhysicsDamage(void) : ""
	input DisableCappedPhysicsDamage(void) : ""
	input SetFlashlightEnable(void) : ""
	input SetFlashlightDisable(void) : ""
	input SetFlashlightFlicker(float) : ""
	input SetFlashlightBrightness(float) : ""
	input HapticPulseLeftHand(void) : ""
	input HapticPulseHands(void) : ""
	input SetGlovesGordon(void) : ""
	input SetGlovesAlyx(void) : ""
	input SetMuzzleFlashEmitLightEnable(void) : ""
	input TestWeaponActive(void) : ""
	input SetFullPlayerHealthOverTime(void) : ""
	input SetTeleportFlipped(void) : ""
	input SetCanAttackEnable(void) : ""
	input SetCanAttackDisable(void) : ""
	input CheckWearingHat(void) : ""
	input SetReceivedDamageScale(void) : ""
	input SetPreventSaving(void) : ""
	input SetEnableSaving(void) : ""
	input SetHUDEnable(void) : ""
	input SetHUDDisable(void) : ""
	input CheckPlayerHasVodkaBottleInWristPocket(void) : ""
	input SetKinematic(void) : ""
	input SetScale(float) : ""
	input TeamNum(integer) : ""
	input SetTeam(string) : ""
	input Use(void) : ""
	input AlternativeSorting(void) : ""
	input SetParent(string) : ""
	input SetParentAttachment(string) : ""
	input SetParentAttachmentMaintainOffset(string) : ""
	input ClearParent(void) : ""
	input EnableDamageForces(void) : ""
	input DisableDamageForces(void) : ""
	input DispatchResponse(void) : ""
	input AddContext(string) : ""
	input RemoveContext(string) : ""
	input ClearContext(void) : ""
	input AddAttribute(void) : ""
	input RemoveAttribute(void) : ""
	input DisableShadow(void) : ""
	input EnableShadow(void) : ""
	input RunScriptCode(void) : ""
	input RunScriptFile(void) : ""
	input CallScriptFunction(void) : ""
	input CallPrivateScriptFunction(void) : ""
	input CallGlobalScriptFunction(void) : ""

	// Outputs
	output PlayerHealth(integer) : ""
	output PlayerHasAmmo(void) : ""
	output PlayerHasNoAmmo(void) : ""
	output PlayerDied(void) : ""
	output OnFlashlightOn(void) : ""
	output OnFlashlightOff(void) : ""
	output PlayerMissedAR2AltFire(void) : ""
	output OnWeaponActive(void) : ""
	output OnWeaponNotActive(void) : ""
	output OnPlayerCoughed(void) : ""
	output OnPlayerCoverMouth(void) : ""
	output OnPlayerUncoverMouth(void) : ""
	output OnPlayerHitBySpit(void) : ""
	output OnVortEnergyAcquiredLeft(void) : ""
	output OnVortEnergyReleasedLeft(void) : ""
	output OnVortEnergyAcquiredRight(void) : ""
	output OnVortEnergyReleasedRight(void) : ""
	output OnVortEnergyAcquiredPrimaryHand(void) : ""
	output OnVortEnergyReleasedPrimaryHand(void) : ""
	output OnVortEnergyAcquiredOffHand(void) : ""
	output OnVortEnergyReleasedOffHand(void) : ""
	output OnPlayerTeleported(void) : ""
	output OutPlayerIsWearingHat(void) : ""
	output OutPlayerIsWearingHatTemp(void) : ""
	output OutPlayerIsNotWearingHat(void) : ""
	output OnPlayerHasOneVodkaBottleInWristPocket(void) : ""
	output OnPlayerHasTwoVodkaBottlesInWristPockets(void) : ""
]

@PointClass base(Targetname, EnableDisable) tags( Logic ) = logic_handsup_listener : ""
[

	// Properties
	one_handed(boolean) [ group="Handsup Listener" ] : "One Handed" : 0 : ""
	start_enabled(boolean) [ group="Handsup Listener" ] : "Start Enabled" : 0 : ""

	// Outputs
	output OnHandsUp(void) : "Fires whenever both hands are up."
	output OnHandsDown(void) : "Fires whenever at least one hand is down."
]

@PointClass base(Targetname) iconsprite("editor/logic_case.vmat") tags( Logic ) = hl_vr_accessibility :
[
	// Inputs
	input QuerySingleControllerMode(void) : "Query the game wether or not the single controller accesability feature is set or not."
	
	// Outputs
	output OnQuerySingleControllerModeEnabled(void)
	output OnQuerySingleControllerModeDisabled(void)
	output OnSingleControllerModeEnabled(void)
	output OnSingleControllerModeDisabled(void)
]

@PointClass base(Targetname) = player_weaponstrip : "Strips the player of their ammo."
[
	// Inputs
	input Strip(void) : "Removes all the ammo in the player's backpack."
	input StripWeaponsAndSuit(void) : "Removes all the ammo in the player's backpack."
	input StripActiveWeapon(void)
	input StripWeaponByClassname(string)
]

@PointClass base(Targetname) = player_speedmod : "Increases the player's movement speed during continuous locomotion"
[
	// Inputs
	input ModifySpeed(float) : "Multiplies the player's speed with this value. 1 is default speed."
]

@PointClass base(Targetname) = point_hlvr_player_input_modifier :
	"An entity used to modify the player's input. That is by Disabling player teleportation or / and completely disabling the player's movement input and hiding the hands model."
[
	start_enabled(boolean) : "Start enabled" : 0
	disable_teleport(boolean) : "Disable teleport" : 1 : "Prevents the player from teleporting (That is in any locomotion setting even continuous)"
	hide_hands(boolean) : "Hide hands" : 0 : "Hides the hands models and disables all movement input made by the player"

	// Inputs
	input Enable(void)
	input Disable(void)
	input Toggle(void)
]

// ----------------------------------------- TONER PUZZLE -----------------------------------------

@PointClass base(Targetname, EnableDisable) tags( Logic ) model("models/props_combine/combine_power/power_stake_a.vmdl") = info_hlvr_toner_port : "Port for the toner puzzles."
[
	initial_orientation(choices) : "Initial Orientation" : "2" : "The initial orientation of the wire within the port. Always does a 90 degree counter-clockwise rotation when activated by the multitool. Numbers are increasing in the counter-clockwise direction. The axis direction the wire is pointing in is given in parentheses. The axes are in the entities local coordinate system." =
	[
		"0" : "0 (+Y)"
		"1" : "1 (-X)"
		"2" : "2 (-Y)"
		"3" : "3 (+X)"
	]
	
	desired_orientation(choices) : "Desired Orientation" : "3" : "The orientation the port will output power to. Also the side on which the path will connect to. This should always be a 90 degree counter-clockwise rotation or +1 of whatever the Initial Orientation is set to. If set to anything else it will either fail to provide power to the wires or be closed and already powering the other wires (if the same)." =
	[
		"0" : "0 (+Y)"
		"1" : "1 (-X)"
		"2" : "2 (-Y)"
		"3" : "3 (+X)"
	]
	
	StartPortVisible(boolean) : "Start Port Visible" : 1 : "Starts with the port wire visible to the multitool. Use Start Disabled instead to have the port start closed."
	StartVisible(boolean) : "Start Puzzle Visible" : 0 : "Starts with all puzzle wires visible to the multitool."

	// Inputs
	input SetVisible(boolean) : "Sets the visibility of the all the puzzle wires."
	input SetPortVisible(boolean) : "Sets the visibility of the port wire. Use Enable/Disable instead to open and close the port."
	input SetComplete(boolean) : "Marks the puzzle as complete, playing the finished puzzle animation and sound, then disables the puzzle."
	// Outputs
	input OnPlugRotated(void) : "Makes the port wire rotate 90 degrees counter-clockwise, even when disabled. Does nothing after the wire hits the desired orientation."
]

@PointClass base(Targetname, EnableDisable) tags( Logic ) toner_path_node() = info_hlvr_toner_path_node : "Additional points used to extend and curve the toner path."
[
	target(target_destination) : "Target" : "" : "Next path node to continue the current path."
	inset_distance(float) : "Inset Distance" : 0 : "How far into the wall, etc., the node should appear."
	is_spline_node(boolean) : "Is Spline" : 0 : "Makes a spline path between this node and its two neighbouring nodes instead of a straight line. Use it to create curved paths."
]

@PointClass base(Targetname, EnableDisable) tags( Logic ) toner_path()
	iconsprite("materials/editor/info_hlvr_toner_path.vmat") = info_hlvr_toner_path : "A single path for the toner puzzles connecting two entities."
[
	start_entity(target_destination) : "Start Entity" : "" : "The entity to start the path from. Usually a toner junction or toner port."
	end_entity(target_destination) : "End Entity" : "" : "The entity that should be the end point of the path. Usually a toner junction or the final entity like a lamp or force field."
	first_path_node(target_destination) : "First Path Node" : "" : "The name of the first toner path node in your path or the same as Start Entity if you don't have any additional toner path nodes; if you don't, the start and end enities will be connected by a straight line."
	
	// Inputs
	input PlayFanfare(void) : "Lights up this path. Can only be triggered once."
	
	// Outputs
	output OnPowerOn(void) : "Triggered when this path receives power."
	output OnPowerOff(void) : "Triggered when this path loses power."
]



@PointClass base(Targetname, EnableDisable) tags( Logic ) toner_junction()
 = info_hlvr_toner_junction : "The interactable junctions for toner puzzles."
[	
	connection_0(target_destination) : "Connection 0" : : "Toner path entity connected to 0. Empty for unconnected."
	connection_1(target_destination) : "Connection 1" : : "Toner path entity connected to 1. Empty for unconnected."
	connection_2(target_destination) : "Connection 2" : : "Toner path entity connected to 2. Empty for unconnected."
	connection_3(target_destination) : "Connection 3" : : "Toner path entity connected to 3. Empty for unconnected."
	
	inset_distance(float) : "Inset Distance" : 0 : "How far into the wall, etc., the junction should appear."

	junction_toplogy(choices) : "Junction Topology" : 0 : "The shape of the junction. Static shapes can't be rotated by the player." = 
	[
		0 : "I"
		1 : "L"
		2 : "T"
		3 : "L dual"
		4 : "Static T"
		5 : "Static 4-way"
	]
	
	junction_orientation(choices) : "Junction Orientation" : 0 : "Starting counter-clockwise rotation of the junction." =
	[
		0 : "0 degrees"
		1 : "90 degrees"
		2 : "180 degrees"
		3 : "270 degrees"
	]
	
	// Outputs
	output OnPass(void) : "When the junction is completed."
]

// ----------------------------------------- POINTS -----------------------------------------
@PointClass base(Targetname, Parentname) editormodel("models/editor/cone_helper.vmdl") = point_vort_energy : "Spawn a vortigaunt energy ring for the grabbity gloves."
[
	model(studio) : "Gravity Glove Hover Model" : "models/props_combine/combine_structures/vort_energy_node_tip.vmdl"

	start_enabled(boolean) : "Start Enabled" : 1 : "Spawn the energy node with energy inside."
	
	// Inputs
	input Enable(void) : "Puts energy into the energy node."
	input Disable(void) : "Removes the energy from the energy node."
	input Toggle(void) : "Toggles the energy of the energy node."
	
	// Outputs
	output OnEnergyPulled(void) : "Called when energy is pulled from the energy node."
]

@PointClass base(Targetname) = point_hlvr_strip_player : "Placeholder."
[
	EnablePhysicsDelay(float) : "Enable Physics Delay" : "1"
	DissolveItemsDelay(float) : "Dissolve Items Delay" : "5"
	ItemVelocity(float) : "Item Velocity" : "40"
	
	// Inputs
	input StripPlayer(void) : ""
	input StripPlayerQuiet(void) : ""
]

@PointClass base(Targetname) editormodel("models/editor/cone_helper.vmdl") = point_zombie_noise_generator : "?"
[
	accumulate(boolean) : "Accumulate" : 1 : "?"
	accumulatelevel(integer) : "Accumulate Level" : 0 : "?"
	
	input GenerateNoise(void) : "?"
	input WanderTo(void) : "?"
	input EnableAccumulation(void) : "?"
]

@PointClass base(Targetname) leansphere( magnet_radius, 255, 64, 64 ) = info_teleport_magnet : "Snaps players teleport location guide to position"
[
	magnet_radius(float): "Magnet Radius": 0
	start_enabled(boolean): "Start Enabled": 1
	
	input Enabled(void): ""
	input Disabled(void): ""
]

@PointClass base(Targetname, EnableDisable) tags( Info ) iconsprite("editor/info_target.vmat") = info_offscreen_panorama_texture : "An entity that lets you draw panorama elements on objects throughout the world."
[
	layout_file(string) : "Layout File" :  : "Path to a layout file. (XML)"

	targets(target_destination) : "Target" : "" : ""

	render_attr_name(string) [ group="Render Properties" ] : "Render Attribute Name" : "colorAttr" : "Name of the Dynamic Expression this should render to."
	resolution_x(integer) [ group="Render Properties" ] : "Resolution (X)" : 720 : "Width"
	resolution_y(integer) [ group="Render Properties" ] : "Resolution (Y)" : 480 : "Height"

	// Inputs
	input AddCSSClass(string) : "Adds specified CSS Class"
	input RemoveCSSClass(string) : "Remove CSS Class"
]

@PointClass base(info_offscreen_panorama_texture) tags( Info ) iconsprite("editor/info_target.vmat") = info_offscreen_movie_texture : "An entity that allows you to play videos on objects throughout the world."
[
	visible_range_check(float) : "Visible Range" : 300 : "Visible range of video."
	src_movie(string) : "Source Movie" :  : "Path to a video to playback. (.webm)"
	repeat(boolean) : "Repeats" : 0 : "Determines whether or not this video will repeat upon completion."
	auto_play(boolean) : "Plays Automatically" : 0 : "Determines whether or not this video will play automatically."

	// Inputs
	input Play(void) : "Play the video"
	input Pause(void) : "Pause playback of video"
	input TogglePlayPause(void) : "Toggle video playback"
]

@PointClass base(BaseCurveOverTime) = point_render_attr_curve : "Entity to drive a render attribute over time when triggered."
[
	attribute_name(string) : "Render Attribute Name" : "The attribute to affect."
	active_combo_name(string) : "Active Combo Name" : ""
]

@PointClass base(Targetname, BaseCurveOverTime) = point_entity_fader : "Entity to fade an object over time when triggered."
[
	target(target_destination) : "Target" : "" : ""
	curve(curve) : "Fade Curve" : "<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->\n{\n\tm_spline = \n\t[\n\t\t{\n\t\t\tx = 0.0\n\t\t\ty = 1.0\n\t\t\tm_flSlopeIncoming = -1.0\n\t\t\tm_flSlopeOutgoing = -1.0\n\t\t},\n\t\t{\n\t\t\tx = 1.0\n\t\t\ty = -0.0\n\t\t\tm_flSlopeIncoming = -1.0\n\t\t\tm_flSlopeOutgoing = -1.0\n\t\t},\n\t]\n\tm_tangents = \n\t[\n\t\t{\n\t\t\tm_nIncomingTangent = \"CURVE_TANGENT_SPLINE\"\n\t\t\tm_nOutgoingTangent = \"CURVE_TANGENT_SPLINE\"\n\t\t},\n\t\t{\n\t\t\tm_nIncomingTangent = \"CURVE_TANGENT_SPLINE\"\n\t\t\tm_nOutgoingTangent = \"CURVE_TANGENT_SPLINE\"\n\t\t},\n\t]\n\tm_vDomainMins = [ 0.0, 0.0 ]\n\tm_vDomainMaxs = [ 1.0, 1.0 ]\n}" : "The curve to use for the fade."
]

@PointClass base(Targetname, EnableDisable) = env_spherical_vignette : "Placeholder."
[
	startdisabled(boolean) : "Start Disabled" : 0
	vignettestart(float) : "Vignette Start" : 64
	vignetteend(float) : "Vignette End" : 256
	farz(float) : "FarZ" : 0
	vignettemaxopacity(float) : "Vignette Max Opacity" : 1
	vignettefalloffexponent(float) : "Vignette Falloff Exponet" : 1
	vignettecolor(color255) : "Vignette Color" : "0, 0, 0"
	vignettestrength(float) : "Vignette Strength" : 1
	fadetime(float) : "Fade Time" : 1

	// Inputs
	input SetVignetteStartDistance(float) : ""
	input SetVignetteEndDistance(float) : ""
	input SetVignetteMaxOpacity(float) : ""
	input SetVignetteFalloffExponent(float) : ""
	input SetVignetteColor(color255) : ""
	input SetVignetteStrength(float) : ""
]

// ----------------------------------------- TRIGGERS -----------------------------------------
@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_detect_bullet_fire : "A trigger volume that can be triggered when bullets pass inside it."
[
	// Properties
	player_fire_only(boolean) [ group="Detect Bullet Fire" ] : "Player Fire Only" : 0 : "It will only detect player bullets."

	// Outputs
	output OnDetectedBulletFire(void) : "Fired whenever a bullet is detected."

	// Inputs
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_detect_explosion : "A trigger volume that can be triggered when explosions inside it."
[
	// Properties

	// Outputs
	output OnDetectedExplosion(void) : "Fired whenever an explosion is detected."

	// Inputs
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_player_out_of_ammo : "Fired whenever the player is inside the volume without ammo."
[
	// Properties
	ammotype(choices) [ group="Player Out Of Ammo" ] : "Ammotype" : 0 : "The ammo type that will activate the trigger." = 
	[
		0 : "All"
		1 : "Energy gun"
		2 : "Shotgun"
		3 : "Rapidfire"
	]

	// Outputs
	output OnPlayerOutOfAmmo(void) : "Fired whenever it detects the player is out of ammo."

	// Inputs
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_resource_analyzer : "Fired whenever the player is inside the volume."
[
	// Properties
	data_name(string) : "Data Name"
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_physics : "Changes physics for entities that enter."
[
	spawnflags(flags) =
	[
		1: "Clients" : 0
		8: "Physics Objects" : 1
	]

	SetGravityScale(float) : "Gravity scale" : 1 : "Gravity is multiplied by this value. 1 for normal, 0 for no gravity, -1 for inverted gravity."
	SetVelocityLimit(float) : "Velocity limit" : -1 : "Upper limit on how fast entities can move within the trigger. -1 means no limit"
	SetVelocityDamping(float) : "Velocity dampining" : 0
	SetAngVelocityLimit(float) : "Angular velocity limit" : -1 : "Upper limit on how fast entities can rotate within the trigger. -1 means no limit"
	SetAngVelocityDamping(float) : "Angular velocity damping" : 0
	SetLinearForce(float) : "Linear force" : 0 : "Constant force applied to all entities within this trigger. Normal gravity is 386."
	LinearForcePointAt(vector) : "Linear force point at" : "0 0 0" : "The direction the force is pointing in."
	CollapseToForcePoint(boolean) : "Collapse to force point" : 0
	SetFrequency(float) : "Frequency" : 1
	SetDampingRatio(float) : "Damping ratio" : 1
	ConvertToDebrisWhenPossible(boolean) : "Convert to debris when possible" : 1

	// Inputs
	input SetLinearForcePointAt(string)
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_blind_zombie_wander_area : "If a Blind Zombie is inside this volume, it will wander inside it or in adjacent volumes of the same entity."
[
	companion_trigger(string) : "Companion Trigger" : "" : "?"
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_lerp_object : "A trigger volume that lerps any entity that touches towards its origin and rotation."
[
	lerp_target(target_destination) : "Target" : "" : "Target to lerp towards."
	lerp_target_attachment(string) : "Target Attachment" : "" : "The attachment point to lerp towards on the target." //battery_attach on the combine battery post
	lerp_restore_movetype(boolean) : "Restore Move Type" : "" : "Restores move type? what"
	lerp_duration(float) : "Duration" : 1 : "Duration of the lerp."
	lerp_effect(particlesystem) : "Particle System" : "particles/entity/trigger_lerp_default.vpcf" : "The particle system to use during the lerp."
	lerp_sound(sound) : "Sound" : "BatteryStation.Electric_Grab" : "The sound to use during the lerp."
	
	output OnLerpStarted(void) : ""
	output OnLerpFinished(void) : ""
]

@SolidClass base(Trigger) tags(Trigger)
	vecline_local(bottom_point, 60, 200, 60)
	vecline_local(top_point, 60, 200, 200)
	metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_traversal_modifier : "Trigger used to reposition player, used for ladders"
[
	target_point(vector) : "Target Point" : "0 0 0" : "Unknown"
	top_point(vector) : "Ladder Top Exit" : "0 0 70" : "Location player will teleport to when going up the ladder, this is relative to the origin of this trigger."
	bottom_point(vector) : "Ladder Bottom Exit" : "-1 0 -67" : "Location player will teleport down to when going down, this is relative to the origin of this trigger."
	instant_traversal(boolean) : "Instant Traversal" : 0 : "Unknown"
	wooden(boolean) : "Is Ladder Wooden" : 0 : "Unknown"
	object_type(int) : "Object Type" : 0 : "Unknown"
	window_shatter(boolean) : "Should shatter window" : 0 : "Unknown"
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_traversal_invalid_spot :
	"Trigger defining a volume inside of which the player is unable to teleport to. " +
	"It's still possible to teleport through the trigger to the other side or simply " +
	"walk through using the continuous movement option."
[
]

@SolidClass base(Trigger) tags(Trigger) metadata { auto_apply_material = "materials/tools/toolstrigger.vmat" } = trigger_traversal_tp_interrupt
[
	capture_on_interrupt(boolean) : "Capture on interrupt" : 1
	capture_on_touch(boolean) : "Capture on touch" : 0
	interrupt_sound(sound) : "Interrupt sound" : ""
	landing_entity_name(target_destination) : "Landing entity" : ""
	landing_relative_offset(vector) : "Landing relative offset" : "0 0 0"
	tp_suppress_sound(sound) : "Teleport suppress sound" : ""
	tp_suppress_remind_interval(float) : "Teleport suppress remind interval" : 0

	landing_no_interrupt_modify(boolean) : "Landing no interrupt" : 0
	capture_ignore_continuous(boolean) : "Ignore continuous" : 0
	
	// Inputs
	input ReleasePlayer(void)
	
	// Output
	output OnTPInterrupted(string)
]

// ----------------------------------------- FILTERS -----------------------------------------
@FilterClass base(BaseFilter) iconsprite("editor/filter_name.vmat") = filter_vr_grenade : "A filter that filters grenades and their state."
[
	// Properties
	IsArmed(boolean) [ group="Vr Grenade" ] : "Is Armed" : 0 : "The grenade state to filter by. If the filter mode is Allow, grenades whose "+
		"state are armed string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT armed grenades will pass the filter."
	IsNotArmed(boolean) [ group="Vr Grenade" ] : "Is Not Armed" : 0 : "The grenade state to filter by. If the filter mode is Allow, grenades whose "+
		"state are not armed string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT unarmed grenades will pass the filter."

	// Outputs

	// Inputs
]


// steamvr imported
@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	pvstype(choices) : "Precomputed Visibility" : 0 : "" = 
	[
		0 : "Disabled"
		1 : "Test map (open space, no skybox)"
		10 : "Full visibility solve"
	]
	steamaudio_export(boolean) : "Export Steam Audio Geometry" : "No"
]

@PointClass base( Targetname ) global( 3dskybox )= skybox_reference
[
	targetMapName(instance_file) : "Map Name"
	fixupNames(boolean) : "Fixup Entity Names" : 0
	worldGroupID(string) : "WorldGroupID" : "skyboxWorldGroup0"
]

@PointClass
	iconsprite( "materials/editor/env_fog_controller.vmat" ) tags( Lighting )
	base( Targetname )
	gradientfog { textureRequired = true }
	global( gradient_fog )
= env_gradient_fog
[
	fogstart(float) : "Fog Start Distance" : "0.0"
	fogend(float) : "Fog End Distance" : "4000.0"
	fogstartheight(float) : "Fog Start Height" : "0.0"
	fogendheight(float) : "Fog End Height" : "200.0"
	farz(string) : "Far Z Clip Plane" : "-1"
	fogverticalexponent(float) : "Fog Vertical Exponet" : "2.0" : ""
	gradientfogtexture(resource:texture) : "Fog Gradient Texture" : "materials/effects/example_gradient_fog.vtex"
	input Enable(void) : "Enable the fog."
	input Disable(void) : "Disable the fog."
]

@PointClass base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_cubemap_fog.vmat" ) 
	cubemap_fog()
= env_cubemap_fog  
[
	cubemapfogtexture(resource:texture) : "Cubemap Texture" : "materials/skybox/tests/src/light_test_sky_sunset.vtex"
	cubemapfoglodbiase(float) : "Cubemap LOD (mip) Bias" : "0.5" : "Adjust how quickly the cubemap blurs out into the distance"
	cubemapfogstartdistance(float) : "Fog Start Distance" : "0.0"
	cubemapfogenddistance(float) : "Fog End Distance" : "6000.0"
	cubemapfogfalloffexponent(float) : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff. For example, 2.0 = proportional to square of distance"
	cubemapfogheightwidth(float) : "Height Fog Width" : "0.0"
	cubemapfogheightstart(float) : "Height Fog Start" : "2000.0"
	cubemapfogheightexponent(float) : "Height Fog Exponent" : "2.0"
]

@OverrideClass = env_combined_light_probe_volume
[
	voxel_size(choices) : "Voxel Size" : "12.0" : "" = 
	[
		"12.0" : "Very High Resolution"
		"24.0" : "High Resolution"
		"48.0" : "Medium Resolution"
		"108.0" : "Low Resolution"
	]
	
	hmd_brightness_level(string) : "HMD Brightness Level" : "0" : "On supported headsets, setting this value will change the brightness of the HMD while within this volume."
]

// Other
@SolidClass base(func_nav_markup) tags( NavMarkup )
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_l4d_nav_markup : "Tagged NAV markup volume entity, used during export and can be queried in-game by tag/name/type/location. For Left 4 Dead."
[
]

@SolidClass base(func_nav_markup) tags( NavMarkup )
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_hlvr_nav_markup : "Tagged NAV markup volume entity, used during export and can be queried in-game by tag/name/type/location. For HLVR."
[
	tagFieldNames(string) : "<internal>" : "navProperty_NavAttributes,navProperty_NavGen" : "<internal>"
]

@SolidClass base(markup_volume_with_ref) tags( NavMarkup )
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_nav_markup_citadel : "Tagged NAV markup volume entity, used during export and can be queried in-game by tag/name/type/location. For Citadel."
[
]
